[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "project"
authors = [{ name = "shenmishajing", email = "shenmishajing@gmail.com" }]
description = "A template project."
readme = "README.md"
dynamic = ["version"]
license = { text = "MIT License" }
requires-python = ">=3.11"
dependencies = []
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[dependency-groups]
# dependencies for development
dev-commit = ["pre-commit", "commitizen"]
dev-doc = [
    "sphinx",
    "sphinx-autobuild",
    "sphinx-book-theme",
    "sphinx-autoapi",
    "myst-parser",
    "sphinx_design",
]
dev-build = ["build"]
dev-test = ["pytest", "pytest-cov"]
dev-core = [{ include-group = "dev-commit" }]
dev = [
    { include-group = "dev-core" },
    { include-group = "dev-doc" },
    { include-group = "dev-build" },
    { include-group = "dev-test" },
]

# all dependencies
all = [{ include-group = "dev" }]

[tool.pixi.workspace]
channels = ["conda-forge"]
platforms = ["linux-64"]

[tool.pixi.pypi-dependencies]
project = { path = ".", editable = true }

[tool.pixi.environments]
base = { solve-group = "default" }
default = { features = ["all"], solve-group = "default" }
all = { features = ["all"], solve-group = "default" }
dev = { features = ["dev"], solve-group = "default" }
dev-build = { features = ["dev-build"], solve-group = "default" }
dev-commit = { features = ["dev-commit"], solve-group = "default" }
dev-core = { features = ["dev-core"], solve-group = "default" }
dev-doc = { features = ["dev-doc"], solve-group = "default" }
dev-test = { features = ["dev-test"], solve-group = "default" }

[tool.pixi.tasks]

[tool.hatch.version]
source = "vcs"

[tool.hatch.version.raw-options]
local_scheme = "node-and-timestamp"

[tool.hatch.build.hooks.vcs]
version-file = "src/project/version.py"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-q --doctest-modules --doctest-glob='*.md' --doctest-continue-on-failure"
testpaths = ["tests", "docs"]

[tool.coverage]
[tool.coverage.run]
omit = ['__init__.py', 'version.py', 'tests/*', 'docs/*', '.venv/*']

[tool.coverage.report]
skip_empty = true
skip_covered = true

[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "$version"
annotated_tag = true
version_scheme = "pep440"
version_provider = "scm"
changelog_file = "docs/get_started/changelog.md"
update_changelog_on_bump = true
